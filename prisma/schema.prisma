generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model firma {
  id       Int        @id @default(autoincrement()) @db.SmallInt
  nazwa    String     @unique
  operacje operacja[]
  opisy    opis[]     @relation("firmyToopisy")

  @@map("firmy")
}

model mieszkanie {
  numer                Int                 @id @unique @db.SmallInt
  metraz               Decimal             @db.Decimal(4, 2)
  platnoscprzelewem    Boolean
  zadeklarowanych_osob Int                 @default(1) @db.SmallInt
  naliczenia           naliczenie[]
  odczyty              odczyt_wodomierza[]

  @@map("mieszkania")
}

model naliczenie {
  numer_mieszkania               Int                @db.SmallInt
  data                           DateTime           @db.Date
  opis                           String
  opal                           Decimal            @db.Money
  fundusz                        Decimal            @db.Money
  woda                           Decimal            @db.Money
  id                             Int                @id @default(autoincrement())
  smieci                         Decimal            @db.Money
  is_deleted                     Boolean            @default(false)
  id_poprzedniego_stanu_licznika Int?               @db.SmallInt
  id_stanu_licznika              Int?               @db.SmallInt
  poprzedni_stan_licznika        odczyt_wodomierza? @relation("poprzedni_stan_licznika", fields: [id_poprzedniego_stanu_licznika], references: [id])
  stan_licznika                  odczyt_wodomierza? @relation("stan_licznika", fields: [id_stanu_licznika], references: [id])
  mieszkanie                     mieszkanie         @relation(fields: [numer_mieszkania], references: [numer])

  @@unique([numer_mieszkania, data, opis])
  @@map("naliczenia")
}

model odczyt_wodomierza {
  numer_mieszkania Int          @db.SmallInt
  data             DateTime     @db.Date
  stan             Decimal      @db.Decimal(7, 3)
  typ              Int          @db.SmallInt
  id               Int          @id @default(autoincrement())
  is_deleted       Boolean      @default(false)
  naliczenia_poprz naliczenie[] @relation("poprzedni_stan_licznika")
  naliczenia       naliczenie[] @relation("stan_licznika")
  mieszkanie       mieszkanie   @relation(fields: [numer_mieszkania], references: [numer])
  typy_odczytow    typ_odczytu  @relation(fields: [typ], references: [id])

  @@unique([numer_mieszkania, data])
  @@map("odczyty_wodomierzy")
}

model operacja {
  id_firmy                  Int                   @db.SmallInt
  data                      DateTime              @db.Date
  numer_dowodu_ksiegowego   String
  kwota                     Decimal               @db.Money
  czy_bank                  Boolean
  id_subkonta               Int
  id                        Int                   @id @default(autoincrement())
  ilosc                     Decimal?              @default(0) @db.Decimal(6, 2)
  komentarz                 String?
  id_opisu                  Int                   @db.SmallInt
  is_deleted                Boolean               @default(false)
  id_typu_dowodu_ksiegowego Int
  firma                     firma                 @relation(fields: [id_firmy], references: [id])
  opis_pow                  opis                  @relation(fields: [id_opisu], references: [id])
  subkonta                  subkonto              @relation(fields: [id_subkonta], references: [id])
  typ_dowodu_ksiegowego     typ_dowodu_ksiegowego @relation(fields: [id_typu_dowodu_ksiegowego], references: [id])

  @@unique([id_firmy, data, id_typu_dowodu_ksiegowego, numer_dowodu_ksiegowego, kwota])
  @@map("operacje")
}

model stawka {
  data         DateTime   @db.Date
  kwota_brutto Decimal    @db.Money
  id           Int        @id @default(autoincrement())
  id_typu      Int        @db.SmallInt
  typy_stawek  typ_stawki @relation(fields: [id_typu], references: [id])

  @@unique([data, kwota_brutto, id_typu])
  @@map("stawki")
}

model subkonto {
  id               Int               @id
  nazwa            String            @unique
  kategorie_opisow kategoria_opisu[]
  operacje         operacja[]

  @@map("subkonta")
}

model typ_dowodu_ksiegowego {
  id       Int        @id @db.SmallInt
  opis     String     @unique
  dowplat  Boolean
  operacje operacja[]
  opisy    opis[]     @relation("opisyTotypy_dowodow_ksiegowych")

  @@map("typy_dowodow_ksiegowych")
}

model typ_odczytu {
  id      Int                 @id @db.SmallInt
  opis    String              @unique
  odczyty odczyt_wodomierza[]

  @@map("typy_odczytow")
}

model typ_stawki {
  id     Int      @id @db.SmallInt
  opis   String   @unique
  stawki stawka[]

  @@map("typy_stawek")
}

model opis {
  id                      Int                     @id @default(autoincrement())
  opis                    String                  @unique
  ilosc_wymagana          Boolean                 
  id_kategorii            Int
  jednostka_miary         String?
  operacje                operacja[]
  kategoria_opisu         kategoria_opisu         @relation(fields: [id_kategorii], references: [id], map: "opisy_id_kategorii_wydatku_fkey")
  firmy                   firma[]                 @relation("firmyToopisy")
  typy_dowodow_ksiegowych typ_dowodu_ksiegowego[] @relation("opisyTotypy_dowodow_ksiegowych")

  @@map("opisy")
}

model kategoria_opisu {
  id              Int      @id @default(autoincrement())
  nazwa           String   @unique
  id_subkonta     Int
  czy_wydatek     Boolean
  czy_zawsze_bank Boolean
  subkonta        subkonto @relation(fields: [id_subkonta], references: [id])
  opisy           opis[]

  @@map("kategorie_opisow")
}

view kartoteka {
  id                      Int      @id
  numer_mieszkania        Int      @db.SmallInt
  data                    DateTime @db.Date
  numer_dowodu_ksiegowego String?
  typ_dowodu_ksiegowego   String?
  naleznosc               Decimal  @db.Money
  opis                    String?
  wplata                  Decimal  @db.Money
  saldo                   Decimal  @db.Money
  poprzedni_stan_licznika Decimal? @db.Decimal
  stan_licznika           Decimal? @db.Decimal

  @@map("kartoteki")
}

view saldo {
  numer_mieszkania Int       @id @db.SmallInt
  data             DateTime? @db.Date
  saldo            Decimal   @db.Money

  @@map("salda")
}

view numerKP {
  nr Int @id

  @@map("numeryKP")
}
